{"version":3,"sources":["Algorithms/algorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getQuickSortAnimations","array","animations","quicksort","lo","hi","p","pivotIdx","pivot","i","j","animation","comparison","swap","temp","push","partition","length","doubleSelectionSort","min","max","minIdx","maxIdx","temp2","getMergeSortAnimations","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","doMerge","numberOfBars","animationSpeed","isRunning","timeouts","SortingVisualizer","props","state","dimensions","this","window","innerWidth","innerHeight","resetArray","timeout","clearTimeout","document","getElementsByClassName","style","backgroundColor","randomIdx","randomIntFromInterval","includes","setState","arrayBars","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","setTimeout","newHeight","height","pivotStyle","tempHeight","test","executeAnimations","getInsertionSortAnimations","getDSelectionSortAnimations","n","getBubbleSortAnimations","sorted","jsSorted","sort","a","b","console","log","arrayOne","arrayTwo","arraysAreEqual","isAnimationFinished","value","slider","getElementById","className","onClick","mergeSort","id","quickSort","heapSort","bubbleSort","insertionSort","type","onChange","setNumberOfBars","map","idx","key","width","React","Component","random","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fb57ea5a.chunk.js","sourcesContent":["export function getBubbleSortAnimations(array) {\n    const animations = [];\n    \n    for (let n = array.length; n > 1; --n) {\n        for (let i = 0; i < n - 1; ++i) {\n            const animation = {};\n            animation.comparison = [i, i + 1];\n            if (array[i] > array[i + 1]) {\n                animation.swap = true;\n                let temp = array[i];\n                array[i] = array[i + 1];\n                array[i + 1] = temp;\n            }\n\n            animations.push(animation);\n        }\n    }\n\n    return animations;\n}\n\nexport function getQuickSortAnimations(array) {\n    const animations = [];\n\n    quicksort(array, 0, array.length - 1, animations);\n\n    return animations;\n}\n\nexport function getInsertionSortAnimations(array) {\n  const animations = [];\n\n  let i = 1;\n\n  while (i < array.length) {\n    let j = i;\n\n    while (j > 0 && array[j - 1] > array[j]) {\n      animations.push({\n        comparison: [j - 1, j],\n        swap: true,\n      });\n\n      const temp = array[j];\n      array[j] = array[j - 1];\n      array[j - 1] = temp;\n      j--;\n    }\n\n    i++;\n  }\n\n  return animations;\n}\n\nexport function getDSelectionSortAnimations(array) {\n  const animations = [];\n\n  var lo = 0;\n  var hi = array.length - 1;\n\n  while (lo <= hi) {\n    let min = array[lo];\n    let max = array[hi];\n    let minIdx = lo;\n    let maxIdx = hi;\n\n    for (let i = lo; i < hi; ++i) {\n      if (array[i] < min) {\n        animations.push({\n          comparison: [i, minIdx],\n          swap: false,\n        });\n\n        min = array[i];\n        minIdx = i;\n      }\n    }\n\n    animations.push({\n      comparison: [minIdx, lo],\n      swap: true,\n    })\n\n    const temp = array[minIdx];\n    array[minIdx] = array[lo];\n    array[lo] = temp;\n\n    lo++;\n\n    for (let i = lo; i < hi; ++i) {\n      if (array[i] > max) {\n        animations.push({\n          comparison: [i, maxIdx],\n          swap: false,\n        });\n\n        max = array[i];\n        maxIdx = i;\n      }\n    }\n\n    animations.push({\n      comparison: [maxIdx, hi],\n      swap: true,\n    })\n\n    const temp2 = array[maxIdx];\n    array[maxIdx] = array[hi];\n    array[hi] = temp2;\n\n    hi--;\n  }\n\n  return animations;\n}\n\nexport function doubleSelectionSort(array) {\n  let lo = 0;\n  let hi = array.length - 1;\n\n  while (lo < hi) {\n    let min = array[lo];\n    let max = array[hi];\n    let minIdx = lo;\n    let maxIdx = hi;\n\n    for (let i = lo; i < hi; ++i) {\n      if (array[i] < min) {\n\n        min = array[i];\n        minIdx = i;\n      }\n    }\n\n    const temp = array[minIdx];\n    array[minIdx] = array[lo];\n    array[lo] = temp;\n\n    lo++;\n\n    for (let i = lo; i < hi; ++i) {\n      if (array[i] > max) {\n        max = array[i];\n        maxIdx = i;\n      }\n    }\n\n    const temp2 = array[maxIdx];\n    array[maxIdx] = array[hi];\n    array[hi] = temp2;\n\n    hi--;\n  }\n\n  return array;\n}\n\nfunction insertionSort(array) {\n  let i = 1;\n\n  while (i < array.length) {\n    let j = i;\n\n    while (j > 0 && array[j - 1] > array[j]) {\n      const temp = array[j];\n      array[j] = array[j - 1];\n      array[j - 1] = temp;\n      j--;\n    }\n\n    i++;\n  }\n\n  return array;\n}\n\nfunction quicksort(array, lo, hi, animations) {\n    if (lo < hi) {\n        const p = partition(array, lo, hi, animations);\n        quicksort(array, lo, p - 1, animations);\n        quicksort(array, p + 1, hi, animations);\n    }\n}\n\nfunction partition(array, lo, hi, animations) {\n    const pivotIdx = hi\n    const pivot = array[pivotIdx];\n    let i = lo;\n\n    for (let j = lo; j < hi; ++j) {\n        const animation = {};\n        animation.comparison = [i, j];\n        animation.pivot = pivotIdx;\n\n        if (array[j] < pivot) {\n            animation.swap = true;\n            const temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n            ++i;\n        }\n\n        animations.push(animation);\n    }\n    \n    const temp = array[i];\n    array[i] = array[hi];\n    array[hi] = temp;\n\n    const animation = {};\n    animation.comparison = [i, hi];\n    animation.swap = true;\n    animation.pivot = pivotIdx;\n    animations.push(animation);\n\n    return i;\n}\n\nexport function bubbleSort(array) {\n    for (let n = array.length; n > 1; --n) {\n        for (let i = 0; i < n - 1; ++i) {\n            if (array[i] > array[i + 1]) {\n                let temp = array[i];\n                array[i] = array[i + 1];\n                array[i + 1] = temp;\n            }\n        }\n    }\n\n    return array;\n}\n\nexport function getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n  }\n  \n  function mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n  }\n  \n  function doMerge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, j]);\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n      } else {\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n      }\n    }\n    while (i <= middleIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, i]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, i]);\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([j, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([j, j]);\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }","import React from 'react';\nimport {\n\tgetMergeSortAnimations,\n\tgetBubbleSortAnimations,\n\tgetQuickSortAnimations,\n\tgetInsertionSortAnimations,\n\tgetDSelectionSortAnimations,\n\tdoubleSelectionSort,\n} from '../Algorithms/algorithms.js';\nimport './SortingVisualizer.css';\nimport { render } from '@testing-library/react';\n\nvar numberOfBars = 100;\n\nvar animationDuration = 1000;\nvar animationSpeed = animationDuration / numberOfBars;\n\nvar isRunning = false;\n\nvar timeouts = [];\n\n// Margin constants\nconst INNER_BAR_MARGIN = 2;\nconst OUTER_MARGIN = 75;\n\n// Color of bars\nconst PRIMARY_COLOR = 'lightskyblue';\n\n// Color of compared bars\nconst SECONDARY_COLOR = 'lightcoral';\n\nexport default class SortingVisualizer extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tarray: [],\n\t\t\tdimensions: [],\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.state.dimensions = [window.innerWidth, window.innerHeight];\n\t\tthis.resetArray();\n\t}\n\n\tresetArray() {\n\t\tthis.isRunning = false;\n\n\t\tfor (let timeout of timeouts) {\n\t\t\tclearTimeout(timeout);\n\t\t}\n\n\t\tfor (let arrayBar of document.getElementsByClassName('array-bar')) {\n\t\t\tarrayBar.style.backgroundColor = PRIMARY_COLOR;\n\t\t}\n\n\t\tconst dimensions = [window.innerWidth, window.innerHeight];\n\t\tconst array = [];\n\t\tconst randomIdx = randomIntFromInterval(0, numberOfBars);\n\n\t\tfor (let i = 0; i < numberOfBars - 1; i++) {\n\t\t\tif (i === randomIdx) {\n\t\t\t\tif (!array.includes(dimensions[1] - 400)) {\n\t\t\t\t\tarray.push(dimensions[1] - 400);\n\t\t\t\t}\n\t\t\t}\n\t\t\tarray.push(randomIntFromInterval(5, dimensions[1] - 400));\n\t\t}\n\n\t\tthis.setState({ array, dimensions });\n\t}\n\n\tmergeSort() {\n\t\tif (isRunning) {\n\t\t\tisRunning = false;\n\t\t\tthis.resetArray();\n\t\t} else {\n\t\t\tisRunning = true;\n\n\t\t\tconst animations = getMergeSortAnimations(this.state.array);\n\t\t\tfor (let i = 0; i < animations.length; i++) {\n\t\t\t\tconst arrayBars = document.getElementsByClassName('array-bar');\n\t\t\t\tconst isColorChange = i % 3 !== 2;\n\t\t\t\tif (isColorChange) {\n\t\t\t\t\tconst [barOneIdx, barTwoIdx] = animations[i];\n\t\t\t\t\tconst barOneStyle = arrayBars[barOneIdx].style;\n\t\t\t\t\tconst barTwoStyle = arrayBars[barTwoIdx].style;\n\t\t\t\t\tconst color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n\t\t\t\t\ttimeouts.push(setTimeout(() => {\n\t\t\t\t\t\tbarOneStyle.backgroundColor = color;\n\t\t\t\t\t\tbarTwoStyle.backgroundColor = color;\n\t\t\t\t\t}, i * animationSpeed));\n\t\t\t\t} else {\n\t\t\t\t\ttimeouts.push(setTimeout(() => {\n\t\t\t\t\t\tconst [barOneIdx, newHeight] = animations[i];\n\t\t\t\t\t\tconst barOneStyle = arrayBars[barOneIdx].style;\n\t\t\t\t\t\tbarOneStyle.height = `${newHeight}px`;\n\t\t\t\t\t}, i * animationSpeed));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tquickSort() {\n\t\tif (isRunning) {\n\t\t\tisRunning = false;\n\t\t\tthis.resetArray();\n\t\t} else {\n\t\t\tisRunning = true;\n\t\t\tconst animations = getQuickSortAnimations(this.state.array);\n\n\t\t\tfor (let i = 0; i < animations.length; ++i) {\n\t\t\t\tconst arrayBars = document.getElementsByClassName('array-bar');\n\t\t\t\tconst isColorChange = i % 3 !== 2;\n\n\t\t\t\tconst [barOneIdx, barTwoIdx] = animations[i].comparison;\n\t\t\t\tconst pivotIdx = animations[i].pivot;\n\t\t\t\tconst barOneStyle = arrayBars[barOneIdx].style;\n\t\t\t\tconst barTwoStyle = arrayBars[barTwoIdx].style;\n\t\t\t\tconst pivotStyle = arrayBars[pivotIdx].style;\n\n\t\t\t\tconst color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n\n\t\t\t\ttimeouts.push(setTimeout(() => {\n\t\t\t\t\tpivotStyle.backgroundColor = 'limegreen';\n\t\t\t\t\tbarOneStyle.backgroundColor = SECONDARY_COLOR;\n\t\t\t\t\tbarTwoStyle.backgroundColor = SECONDARY_COLOR;\n\n\t\t\t\t}, i * animationSpeed));\n\n\t\t\t\ttimeouts.push(setTimeout(() => {\n\t\t\t\t\tpivotStyle.backgroundColor = PRIMARY_COLOR;\n\t\t\t\t\tbarOneStyle.backgroundColor = PRIMARY_COLOR;\n\t\t\t\t\tbarTwoStyle.backgroundColor = PRIMARY_COLOR;\n\t\t\t\t}, i * animationSpeed + animationSpeed * 0.7));\n\t\t\t\tconst shouldSwap = animations[i].swap;\n\n\t\t\t\tif (shouldSwap) {\n\t\t\t\t\tconst [barOneIdx, barTwoIdx] = animations[i].comparison;\n\t\t\t\t\tconst barOneStyle = arrayBars[barOneIdx].style;\n\t\t\t\t\tconst barTwoStyle = arrayBars[barTwoIdx].style;\n\n\t\t\t\t\ttimeouts.push(setTimeout(() => {\n\t\t\t\t\t\tconst tempHeight = barOneStyle.height;\n\t\t\t\t\t\tbarOneStyle.height = barTwoStyle.height;\n\t\t\t\t\t\tbarTwoStyle.height = tempHeight;\n\t\t\t\t\t}, i * animationSpeed));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\theapSort() {\n\t\tthis.test();\n\t}\n\n\tinsertionSort() {\n\t\tif (isRunning) {\n\t\t\tisRunning = false;\n\t\t\tthis.resetArray();\n\t\t} else {\n\t\t\tisRunning = true;\n\t\t\tthis.executeAnimations(getInsertionSortAnimations(this.state.array));\n\t\t}\n\t}\n\n\tdoubleSelectionSort() {\n\t\tif (isRunning) {\n\t\t\tisRunning = false;\n\t\t\tthis.resetArray();\n\t\t} else {\n\t\t\tisRunning = true;\n\t\t\tthis.executeAnimations(getDSelectionSortAnimations(this.state.array));\n\t\t}\n\t}\n\n\tbubbleSort() {\n\t\tif (isRunning) {\n\t\t\tisRunning = false;\n\t\t\tthis.resetArray();\n\t\t} else {\n\t\t\tisRunning = true;\n\t\t\tthis.executeAnimations(getBubbleSortAnimations(this.state.array));\n\t\t}\n\t}\n\n\ttest() {\n\t\tconst sorted = doubleSelectionSort(doubleSelectionSort(this.state.array));\n\t\tconst jsSorted = this.state.array.slice().sort((a, b) => a - b);\n\n\t\tconsole.log(arraysAreEqual(sorted, jsSorted));\n\t}\n\n\texecuteAnimations(animations) {\n\t\tfor (let i = 0; i < animations.length; ++i) {\n\t\t\tconst arrayBars = document.getElementsByClassName('array-bar');\n\t\t\tconst isColorChange = i % 3 !== 2;\n\n\t\t\tconst [barOneIdx, barTwoIdx] = animations[i].comparison;\n\t\t\tconst barOneStyle = arrayBars[barOneIdx].style;\n\t\t\tconst barTwoStyle = arrayBars[barTwoIdx].style;\n\n\t\t\tconst color = i % 2 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n\n\t\t\ttimeouts.push(setTimeout(() => {\n\t\t\t\tbarOneStyle.backgroundColor = SECONDARY_COLOR;\n\t\t\t\tbarTwoStyle.backgroundColor = SECONDARY_COLOR;\n\t\t\t}, i * animationSpeed));\n\n\t\t\ttimeouts.push(setTimeout(() => {\n\t\t\t\tbarOneStyle.backgroundColor = PRIMARY_COLOR;\n\t\t\t\tbarTwoStyle.backgroundColor = PRIMARY_COLOR;\n\t\t\t}, i * animationSpeed + animationSpeed * 0.7));\n\n\t\t\tconst shouldSwap = animations[i].swap;\n\n\t\t\tif (shouldSwap) {\n\t\t\t\tconst [barOneIdx, barTwoIdx] = animations[i].comparison;\n\t\t\t\tconst barOneStyle = arrayBars[barOneIdx].style;\n\t\t\t\tconst barTwoStyle = arrayBars[barTwoIdx].style;\n\n\t\t\t\ttimeouts.push(setTimeout(() => {\n\t\t\t\t\tconst tempHeight = barOneStyle.height;\n\t\t\t\t\tbarOneStyle.height = barTwoStyle.height;\n\t\t\t\t\tbarTwoStyle.height = tempHeight;\n\n\t\t\t\t\tif (this.isAnimationFinished()) {\n\t\t\t\t\t\tisRunning = false;\n\t\t\t\t\t}\n\t\t\t\t}, i * animationSpeed));\n\t\t\t}\n\t\t}\n\t}\n\n\tisAnimationFinished() {\n\t\tconst arrayBars = document.getElementsByClassName(\"array-bar\");\n\t\tfor (let i = 0; i < this.state.array.length; ++i) {\n\t\t\tif (arrayBars[i].style.height.value !== this.state.array[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\treRender() {\n\t\tthis.setState(this.state);\n\t}\n\n\tstopAnimations() {\n\t\t//\n\t}\n\n\t/**\n\t * Slider functions\n\t */\n\tsetNumberOfBars() {\n\t\tvar slider = document.getElementById(\"numberOfBars\");\n\t\tnumberOfBars = slider.value;\n\t\tanimationSpeed = animationDuration / numberOfBars;\n\t\tthis.resetArray();\n\t}\n\n\trender() {\n\t\tconst { array } = this.state;\n\t\tconst dimensions = this.state.dimensions;\n\n\t\treturn (\n\t\t\t<div className=\"body\">\n\t\t\t\t<div className=\"controls\">\n\t\t\t\t\t<button onClick={() => this.resetArray()} className=\"randomizeBtn\">Randomize</button>\n\t\t\t\t\t<button onClick={() => this.mergeSort()} id=\"mergesortBtn\">MergeSort</button>\n\t\t\t\t\t<button onClick={() => this.quickSort()} id=\"quicksortBtn\">QuickSort</button>\n\t\t\t\t\t<button onClick={() => this.heapSort()} id=\"heapsortBtn\">Heap Sort</button>\n\t\t\t\t\t<button onClick={() => this.bubbleSort()} id=\"bubblesortBtn\">BubbleSort</button>\n\t\t\t\t\t<button onClick={() => this.insertionSort()} id=\"insertionsortBtn\">InsertionSort</button>\n\t\t\t\t\t<button onClick={() => this.doubleSelectionSort()}>Double SelectionSort</button>\n\t\t\t\t\t<br />\n\t\t\t\t\t<p>Number of bars: {numberOfBars}</p>\n\t\t\t\t\t<input type=\"range\" min=\"10\" max=\"300\" value={numberOfBars} className=\"slider\" id=\"numberOfBars\" onChange={() => this.setNumberOfBars()} />\n\t\t\t\t\t<br />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"array-container\">\n\t\t\t\t\t{array.map((value, idx) => (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName=\"array-bar\"\n\t\t\t\t\t\t\tkey={idx}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tbackgroundColor: PRIMARY_COLOR,\n\t\t\t\t\t\t\t\theight: `${value}px`,\n\t\t\t\t\t\t\t\twidth: `${dimensions[0] / numberOfBars - 2 * INNER_BAR_MARGIN - 2 * OUTER_MARGIN / numberOfBars}px`,\n\t\t\t\t\t\t\t}}></div>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nfunction randomIntFromInterval(min, max) {\n\t// min and max included\n\treturn Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n\tif (arrayOne.length !== arrayTwo.length) return false;\n\tfor (let i = 0; i < arrayOne.length; i++) {\n\t\tif (arrayOne[i] !== arrayTwo[i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}