{"version":3,"sources":["Algorithms/algorithms.js","SortingVisualizer/SortingVisualizer.jsx","SortingVisualizer/Controls.jsx","SortingVisualizer/Main.jsx","App.js","serviceWorker.js","index.js"],"names":["heapify","array","length","i","animations","largest","left","right","temp","push","comparison","swap","getQuickSortAnimations","quicksort","lo","hi","p","pivotIdx","pivot","j","animation","sorted","partition","doubleSelectionSort","min","max","minIdx","maxIdx","temp2","getMergeSortAnimations","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","lastMerge","k","doMerge","numberOfBars","animationSpeed","isRunning","timeouts","SortingVisualizer","props","state","dimensions","this","window","innerWidth","innerHeight","resetArray","timeout","clearTimeout","document","getElementsByClassName","style","backgroundColor","randomIdx","randomIntFromInterval","includes","setState","arrayBars","isColorChange","undefined","setTimeout","animationFinished","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","newHeight","height","pivotStyle","tempHeight","executeAnimations","gap","finished","getCombSortAnimations","getInsertionSortAnimations","getSelectionSortAnimations","n","getBubbleSortAnimations","getHeapSortAnimations","jsSorted","sort","a","b","console","log","arrayOne","arrayTwo","arraysAreEqual","isAnimationFinished","value","slider","getElementById","className","map","idx","key","width","React","Component","random","Controls","childFunction","algo","functionCallFromParent","algoButtons","enabled","numBars","sliderEnabled","id","updateBars","buttons","onClick","disabled","type","onChange","setNumBars","Main","parentFunction","data_from_child","sV","refs","child","mergeSort","quickSort","heapSort","combSort","bubbleSort","insertionSort","selectionSort","setNumberOfBars","controlChild","enableUI","ref","bind","newAlg","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3ad02d0a.chunk.js","sourcesContent":["export function getHeapSortAnimations(array) {\n\tconst animations = [];\n\n\tlet length = array.length;\n\tlet i = Math.floor(length / 2 - 1);\n\tlet k = length - 1;\n\n\twhile (i >= 0) {\n\t\theapify(array, length, i, animations);\n\t\ti--;\n\t}\n\n\twhile (k >= 0) {\n\t\tconst temp = array[0];\n\t\tarray[0] = array[k];\n\t\tarray[k] = temp;\n\n\t\tanimations.push({\n\t\t\tcomparison: [0, k],\n\t\t\tswap: true\n\t\t});\n\n\t\tanimations.push({\n\t\t\tcomparison: [0, k],\n\t\t\tswap: false,\n\t\t\tsorted: [k]\n\t\t});\n\n\t\theapify(array, k, 0, animations);\n\t\tk--;\n\t}\n\n\treturn animations;\n}\n\nfunction heapify(array, length, i, animations) {\n\tlet largest = i;\n\tlet left = i * 2 + 1;\n\tlet right = left + 1;\n\t\n\tif (left < length && array[left] > array[largest]) {\n\t\tlargest = left;\n\t}\n\n\tif (right < length && array[right] > array[largest]) {\n\t\tlargest = right;\n\t}\n\n\tif (largest != i) {\n\t\tconst temp = array[i];\n\t\tarray[i] = array[largest];\n\t\tarray[largest] = temp;\n\n\t\tanimations.push({\n\t\t\tcomparison: [i, largest],\n\t\t\tswap: true\n\t\t});\n\n\t\theapify(array, length, largest, animations);\n\t}\n\n\treturn array;\n}\n\nexport function getCombSortAnimations(array) {\n\tconst animations = [];\n\n\tvar gap = array.length\n\tconst shrink = 1.3;\n\tvar finished = false;\n\n\twhile (finished == false) {\n\t\tgap = Math.floor(gap / shrink);\n\n\t\tif (gap <= 1) {\n\t\t\tgap = 1;\n\t\t\tfinished = true;\n\t\t}\n\n\t\tvar i = 0;\n\t\twhile (i + gap < array.length) {\n\t\t\tconst animation = {};\n\t\t\tanimation.comparison = [i, i + gap];\n\n\t\t\tif (array[i] > array[i + gap]) {\n\t\t\t\tanimation.swap = true;\n\t\t\t\tconst temp = array[i];\n\t\t\t\tarray[i] = array[i + gap];\n\t\t\t\tarray[i + gap] = temp;\n\t\t\t\tfinished = false;\n\t\t\t}\n\n\t\t\tanimations.push(animation);\n\n\t\t\ti++;\n\t\t}\n\t}\n\n\tconst sorted = [];\n\tfor (let i = 0; i < array.length; ++i) {\n\t\tsorted.push(i);\n\t}\n\n\tanimations.push({\n\t\tcomparison: [0, 0],\n\t\tswap: false,\n\t\tsorted: sorted\n\t});\n\n\treturn animations;\n}\n\nexport function getBubbleSortAnimations(array) {\n\tconst animations = [];\n\n\tfor (let n = array.length; n > 1; --n) {\n\t\tfor (let i = 0; i < n - 1; ++i) {\n\t\t\tconst animation = {};\n\t\t\tanimation.comparison = [i, i + 1];\n\t\t\tif (array[i] > array[i + 1]) {\n\t\t\t\tanimation.swap = true;\n\t\t\t\tlet temp = array[i];\n\t\t\t\tarray[i] = array[i + 1];\n\t\t\t\tarray[i + 1] = temp;\n\t\t\t}\n\n\t\t\tanimations.push(animation);\n\t\t}\n\n\t\tanimations.push({\n\t\t\tcomparison: [n - 1, n - 1],\n\t\t\tswap: false,\n\t\t\tsorted: [n - 1]\n\t\t})\n\t}\n\n\tanimations.push({\n\t\tcomparison: [0, 0],\n\t\tswap: false,\n\t\tsorted: [0]\n\t})\n\n\treturn animations;\n}\n\nexport function getQuickSortAnimations(array) {\n\tconst animations = [];\n\n\tquicksort(array, 0, array.length - 1, animations);\n\n\treturn animations;\n}\n\nexport function getInsertionSortAnimations(array) {\n\tconst animations = [];\n\n\tlet i = 1;\n\n\twhile (i < array.length) {\n\t\tlet j = i;\n\n\t\twhile (j > 0 && array[j - 1] > array[j]) {\n\t\t\tanimations.push({\n\t\t\t\tcomparison: [j - 1, j],\n\t\t\t\tswap: true,\n\t\t\t});\n\n\t\t\tconst temp = array[j];\n\t\t\tarray[j] = array[j - 1];\n\t\t\tarray[j - 1] = temp;\n\t\t\tj--;\n\t\t}\n\n\t\ti++;\n\t}\n\n\tconst sorted = [];\n\tfor (let i = 0; i < array.length; ++i) {\n\t\tsorted.push(i);\n\t}\n\n\tanimations.push({\n\t\tcomparison: [0, 0],\n\t\tswap: false,\n\t\tsorted: sorted\n\t});\n\n\treturn animations;\n}\n\nexport function getSelectionSortAnimations(array) {\n\tconst animations = [];\n\n\tvar lo = 0;\n\n\twhile (lo < array.length) {\n\t\tlet min = array[lo];\n\t\tlet minIdx = lo;\n\n\t\tfor (let i = lo; i < array.length; ++i) {\n\t\t\tif (array[i] < min) {\n\t\t\t\tanimations.push({\n\t\t\t\t\tcomparison: [i, minIdx],\n\t\t\t\t\tswap: false,\n\t\t\t\t});\n\n\t\t\t\tmin = array[i];\n\t\t\t\tminIdx = i;\n\t\t\t}\n\t\t}\n\n\t\tanimations.push({\n\t\t\tcomparison: [minIdx, lo],\n\t\t\tswap: true\n\t\t})\n\n\t\tanimations.push({\n\t\t\tcomparison: [minIdx, lo],\n\t\t\tswap: false,\n\t\t\tsorted: [lo]\n\t\t})\n\n\t\tconst temp = array[minIdx];\n\t\tarray[minIdx] = array[lo];\n\t\tarray[lo] = temp;\n\n\t\tlo++;\n\t}\n\n\treturn animations;\n}\n\nexport function doubleSelectionSort(array) {\n\tlet lo = 0;\n\tlet hi = array.length - 1;\n\n\twhile (lo < hi) {\n\t\tlet min = array[lo];\n\t\tlet max = array[hi];\n\t\tlet minIdx = lo;\n\t\tlet maxIdx = hi;\n\n\t\tfor (let i = lo; i < hi; ++i) {\n\t\t\tif (array[i] < min) {\n\n\t\t\t\tmin = array[i];\n\t\t\t\tminIdx = i;\n\t\t\t}\n\t\t}\n\n\t\tconst temp = array[minIdx];\n\t\tarray[minIdx] = array[lo];\n\t\tarray[lo] = temp;\n\n\t\tlo++;\n\n\t\tfor (let i = lo; i < hi; ++i) {\n\t\t\tif (array[i] > max) {\n\t\t\t\tmax = array[i];\n\t\t\t\tmaxIdx = i;\n\t\t\t}\n\t\t}\n\n\t\tconst temp2 = array[maxIdx];\n\t\tarray[maxIdx] = array[hi];\n\t\tarray[hi] = temp2;\n\n\t\thi--;\n\t}\n\n\treturn array;\n}\n\nfunction insertionSort(array) {\n\tlet i = 1;\n\n\twhile (i < array.length) {\n\t\tlet j = i;\n\n\t\twhile (j > 0 && array[j - 1] > array[j]) {\n\t\t\tconst temp = array[j];\n\t\t\tarray[j] = array[j - 1];\n\t\t\tarray[j - 1] = temp;\n\t\t\tj--;\n\t\t}\n\n\t\ti++;\n\t}\n\n\treturn array;\n}\n\nfunction quicksort(array, lo, hi, animations) {\n\tif (lo < hi) {\n\t\tconst p = partition(array, lo, hi, animations);\n\n\t\tquicksort(array, lo, p - 1, animations);\n\t\tvar sorted = [p];\n\t\tif (p - 1 >= lo) sorted.push(p - 1);\n\t\tanimations.push({\n\t\t\tcomparison: [p, p],\n\t\t\tswap: false,\n\t\t\tpivot: p,\n\t\t\tsorted: sorted\n\t\t});\n\n\t\tquicksort(array, p + 1, hi, animations);\n\t\tsorted = [p];\n\t\tif (p + 1 <= hi) sorted.push(p + 1)\n\n\t\tanimations.push({\n\t\t\tcomparison: [p, p],\n\t\t\tswap: false,\n\t\t\tpivot: p,\n\t\t\tsorted: sorted\n\t\t})\n\t}\n}\n\nfunction partition(array, lo, hi, animations) {\n\tconst pivotIdx = hi\n\tconst pivot = array[pivotIdx];\n\tlet i = lo;\n\n\tfor (let j = lo; j < hi; ++j) {\n\t\tconst animation = {};\n\t\tanimation.comparison = [i, j];\n\t\tanimation.pivot = pivotIdx;\n\n\t\tif (array[j] < pivot) {\n\t\t\tanimation.swap = true;\n\t\t\tconst temp = array[i];\n\t\t\tarray[i] = array[j];\n\t\t\tarray[j] = temp;\n\t\t\t++i;\n\t\t}\n\n\t\tanimations.push(animation);\n\t}\n\n\tconst temp = array[i];\n\tarray[i] = array[hi];\n\tarray[hi] = temp;\n\n\tconst animation = {};\n\tanimation.comparison = [i, hi];\n\tanimation.swap = true;\n\tanimation.pivot = pivotIdx;\n\tanimations.push(animation);\n\n\tanimations.push({\n\t\tcomparison: [i, i],\n\t\tswap: false,\n\t\tpivot: pivotIdx,\n\t\tsorted: [i]\n\t})\n\n\treturn i;\n}\n\nexport function bubbleSort(array) {\n\tfor (let n = array.length; n > 1; --n) {\n\t\tfor (let i = 0; i < n - 1; ++i) {\n\t\t\tif (array[i] > array[i + 1]) {\n\t\t\t\tlet temp = array[i];\n\t\t\t\tarray[i] = array[i + 1];\n\t\t\t\tarray[i + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn array;\n}\n\nexport function getMergeSortAnimations(array) {\n\tconst animations = [];\n\tif (array.length <= 1) return array;\n\tconst auxiliaryArray = array.slice();\n\tmergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n\n\tconst sorted = [];\n\tfor (let i = 0; i < array.length; ++i) {\n\t\tsorted.push(i);\n\t}\n\n\tanimations.push({\n\t\tcomparison: [0, 0],\n\t\tswap: false,\n\t\tsorted: sorted\n\t});\n\n\treturn animations;\n}\n\nfunction mergeSortHelper(\n\tmainArray,\n\tstartIdx,\n\tendIdx,\n\tauxiliaryArray,\n\tanimations\n) {\n\tif (startIdx === endIdx) return;\n\tconst middleIdx = Math.floor((startIdx + endIdx) / 2);\n\tmergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n\tmergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n\tdoMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n\tmainArray,\n\tstartIdx,\n\tmiddleIdx,\n\tendIdx,\n\tauxiliaryArray,\n\tanimations,\n\tlastMerge\n) {\n\tlet k = startIdx;\n\tlet i = startIdx;\n\tlet j = middleIdx + 1;\n\twhile (i <= middleIdx && j <= endIdx) {\n\t\t// These are the values that we're comparing; we push them once\n\t\t// to change their color.\n\t\tanimations.push([i, j]);\n\t\t// These are the values that we're comparing; we push them a second\n\t\t// time to revert their color.\n\t\tanimations.push([i, j]);\n\t\tif (auxiliaryArray[i] <= auxiliaryArray[j]) {\n\t\t\t// We overwrite the value at index k in the original array with the\n\t\t\t// value at index i in the auxiliary array.\n\t\t\tanimations.push([k, auxiliaryArray[i]]);\n\t\t\tmainArray[k++] = auxiliaryArray[i++];\n\t\t} else {\n\t\t\t// We overwrite the value at index k in the original array with the\n\t\t\t// value at index j in the auxiliary array.\n\t\t\tanimations.push([k, auxiliaryArray[j]]);\n\t\t\tmainArray[k++] = auxiliaryArray[j++];\n\t\t}\n\t}\n\twhile (i <= middleIdx) {\n\t\t// These are the values that we're comparing; we push them once\n\t\t// to change their color.\n\t\tanimations.push([i, i]);\n\t\t// These are the values that we're comparing; we push them a second\n\t\t// time to revert their color.\n\t\tanimations.push([i, i]);\n\t\t// We overwrite the value at index k in the original array with the\n\t\t// value at index i in the auxiliary array.\n\t\tanimations.push([k, auxiliaryArray[i]]);\n\t\tmainArray[k++] = auxiliaryArray[i++];\n\t}\n\twhile (j <= endIdx) {\n\t\t// These are the values that we're comparing; we push them once\n\t\t// to change their color.\n\t\tanimations.push([j, j]);\n\t\t// These are the values that we're comparing; we push them a second\n\t\t// time to revert their color.\n\t\tanimations.push([j, j]);\n\t\t// We overwrite the value at index k in the original array with the\n\t\t// value at index j in the auxiliary array.\n\t\tanimations.push([k, auxiliaryArray[j]]);\n\t\tmainArray[k++] = auxiliaryArray[j++];\n\t}\n}","import React from \"react\";\nimport {\n  getMergeSortAnimations,\n  getBubbleSortAnimations,\n  getQuickSortAnimations,\n  getInsertionSortAnimations,\n  getSelectionSortAnimations,\n  doubleSelectionSort,\n  getCombSortAnimations,\n  getShellSortAnimations,\n  getHeapSortAnimations,\n} from \"../Algorithms/algorithms.js\";\nimport \"./SortingVisualizer.css\";\nimport { render } from \"@testing-library/react\";\n\nvar numberOfBars = 100;\n\nvar animationDuration = 2000;\nvar animationSpeed = animationDuration / numberOfBars;\n\nvar isRunning = false;\n\nvar timeouts = [];\n\nvar uiEnabled = true;\n\nvar oldAlg = 0;\n\nconst animationMultiplier = 0.5;\n\n// Margin constants\nconst INNER_BAR_MARGIN = 2;\nconst OUTER_MARGIN = 75;\n\n// Color of bars\nconst PRIMARY_COLOR = \"lightskyblue\";\n\n// Color of compared bars\nconst SECONDARY_COLOR = \"lightcoral\";\n\nconst SORTED_COLOR = \"mediumpurple\";\n\nvar currentAlgo = -1;\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n      dimensions: [],\n    };\n  }\n\n  componentDidMount() {\n    this.state.dimensions = [window.innerWidth, window.innerHeight];\n    this.resetArray();\n  }\n\n  resetArray() {\n    this.isRunning = false;\n\n    for (let timeout of timeouts) {\n      clearTimeout(timeout);\n    }\n\n    for (let arrayBar of document.getElementsByClassName(\"array-bar\")) {\n      arrayBar.style.backgroundColor = PRIMARY_COLOR;\n    }\n\n    const dimensions = [window.innerWidth, window.innerHeight];\n    const array = [];\n    const randomIdx = randomIntFromInterval(0, numberOfBars);\n\n    for (let i = 0; i < numberOfBars - 1; i++) {\n      if (i === randomIdx) {\n        if (!array.includes(dimensions[1] - 400)) {\n          array.push(dimensions[1] - 400);\n        }\n      }\n      array.push(randomIntFromInterval(5, dimensions[1] - 400));\n    }\n\n    this.setState({ array, dimensions });\n  }\n\n  mergeSort() {\n    if (isRunning) {\n      isRunning = false;\n      this.resetArray();\n    } else {\n\t  isRunning = true;\n\t  \n\t  const arrayBars = document.getElementsByClassName(\"array-bar\");\n\n\t\tfor (let i = 0; i < arrayBars.length; ++i) {\n\t\t\tarrayBars[i].style.backgroundColor = PRIMARY_COLOR;\n\t\t}\n\n      const animations = getMergeSortAnimations(this.state.array);\n      for (let i = 0; i < animations.length; i++) {\n        const arrayBars = document.getElementsByClassName(\"array-bar\");\n        const isColorChange = i % 3 !== 2;\n\n        const sorted = animations[i].sorted;\n\n        if (sorted !== undefined) {\n          timeouts.push(\n            setTimeout(() => {\n              for (let j = 0; j < sorted.length; ++j) {\n                arrayBars[sorted[j]].style.backgroundColor = SORTED_COLOR;\n              }\n\n              if (i === animations.length - 1) {\n                isRunning = false;\n                this.props.animationFinished();\n              }\n            }, i * animationSpeed * animationMultiplier)\n          );\n        } else {\n          if (isColorChange) {\n            const [barOneIdx, barTwoIdx] = animations[i];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            const barTwoStyle = arrayBars[barTwoIdx].style;\n            const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n            timeouts.push(\n              setTimeout(() => {\n                barOneStyle.backgroundColor = color;\n                barTwoStyle.backgroundColor = color;\n              }, i * animationSpeed * animationMultiplier)\n            );\n          } else {\n            timeouts.push(\n              setTimeout(() => {\n                const [barOneIdx, newHeight] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                barOneStyle.height = `${newHeight}px`;\n              }, i * animationSpeed * animationMultiplier)\n            );\n          }\n        }\n      }\n    }\n  }\n\n  quickSort() {\n    if (isRunning) {\n      isRunning = false;\n      this.resetArray();\n    } else {\n\t  isRunning = true;\n\t  const arrayBars = document.getElementsByClassName(\"array-bar\");\n\n\t\tfor (let i = 0; i < arrayBars.length; ++i) {\n\t\t\tarrayBars[i].style.backgroundColor = PRIMARY_COLOR;\n\t\t}\n\n      const animations = getQuickSortAnimations(this.state.array);\n\n      for (let i = 0; i < animations.length; ++i) {\n        const arrayBars = document.getElementsByClassName(\"array-bar\");\n        const isColorChange = i % 3 !== 2;\n\n        const [barOneIdx, barTwoIdx] = animations[i].comparison;\n        const pivotIdx = animations[i].pivot;\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const pivotStyle = arrayBars[pivotIdx].style;\n\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n\n        const sorted = animations[i].sorted;\n\n        if (sorted !== undefined) {\n          timeouts.push(\n            setTimeout(() => {\n              for (let j = 0; j < sorted.length; ++j) {\n                arrayBars[sorted[j]].style.backgroundColor = SORTED_COLOR;\n              }\n\n              if (i === animations.length - 1) {\n                isRunning = false;\n                this.props.animationFinished();\n              }\n            }, i * animationSpeed + animationSpeed * animationMultiplier)\n          );\n        } else {\n          timeouts.push(\n            setTimeout(() => {\n              pivotStyle.backgroundColor = \"limegreen\";\n              barOneStyle.backgroundColor = SECONDARY_COLOR;\n              barTwoStyle.backgroundColor = SECONDARY_COLOR;\n            }, i * animationSpeed)\n          );\n\n          timeouts.push(\n            setTimeout(() => {\n              pivotStyle.backgroundColor = PRIMARY_COLOR;\n              barOneStyle.backgroundColor = PRIMARY_COLOR;\n              barTwoStyle.backgroundColor = PRIMARY_COLOR;\n            }, i * animationSpeed + animationSpeed * animationMultiplier)\n          );\n          const shouldSwap = animations[i].swap;\n\n          if (shouldSwap) {\n            const [barOneIdx, barTwoIdx] = animations[i].comparison;\n            const barOneStyle = arrayBars[barOneIdx].style;\n            const barTwoStyle = arrayBars[barTwoIdx].style;\n\n            timeouts.push(\n              setTimeout(() => {\n                const tempHeight = barOneStyle.height;\n                barOneStyle.height = barTwoStyle.height;\n                barTwoStyle.height = tempHeight;\n              }, i * animationSpeed)\n            );\n          }\n        }\n      }\n    }\n  }\n\n  combSort() {\n      this.executeAnimations(getCombSortAnimations(this.state.array));\n  }\n\n  insertionSort() {\n      this.executeAnimations(getInsertionSortAnimations(this.state.array));\n  }\n\n  selectionSort() {\n      this.executeAnimations(getSelectionSortAnimations(this.state.array));\n  }\n\n  bubbleSort() {\n      this.executeAnimations(getBubbleSortAnimations(this.state.array));\n  }\n\n  heapSort() {\n\t  this.executeAnimations(getHeapSortAnimations(this.state.array));\n  }\n\n  test() {\n    const sorted = doubleSelectionSort(doubleSelectionSort(this.state.array));\n    const jsSorted = this.state.array.slice().sort((a, b) => a - b);\n\n    console.log(arraysAreEqual(sorted, jsSorted));\n  }\n\n  executeAnimations(animations) {\n    if (isRunning) {\n      isRunning = false;\n      this.resetArray();\n    } else {\n\t\tisRunning = true;\n\t\tconst arrayBars = document.getElementsByClassName(\"array-bar\");\n\n\t\tfor (let i = 0; i < arrayBars.length; ++i) {\n\t\t\tarrayBars[i].style.backgroundColor = PRIMARY_COLOR;\n\t\t}\n\n      for (let i = 0; i < animations.length; ++i) {\n        const arrayBars = document.getElementsByClassName(\"array-bar\");\n        const isColorChange = i % 3 !== 2;\n\n        const [barOneIdx, barTwoIdx] = animations[i].comparison;\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n\n        const color = i % 2 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n\n        const sorted = animations[i].sorted;\n\n        if (sorted !== undefined) {\n          timeouts.push(\n            setTimeout(() => {\n              for (let j = 0; j < sorted.length; ++j) {\n                arrayBars[sorted[j]].style.backgroundColor = SORTED_COLOR;\n              }\n\n              if (i === animations.length - 1) {\n                isRunning = false;\n                this.props.animationFinished();\n              }\n            }, i * animationSpeed + animationSpeed * animationMultiplier)\n          );\n        } else {\n          timeouts.push(\n            setTimeout(() => {\n              barOneStyle.backgroundColor = SECONDARY_COLOR;\n              barTwoStyle.backgroundColor = SECONDARY_COLOR;\n            }, i * animationSpeed)\n          );\n\n          timeouts.push(\n            setTimeout(() => {\n              barOneStyle.backgroundColor = PRIMARY_COLOR;\n              barTwoStyle.backgroundColor = PRIMARY_COLOR;\n            }, i * animationSpeed + animationSpeed * animationMultiplier)\n          );\n\n          const shouldSwap = animations[i].swap;\n\n          if (shouldSwap) {\n            const [barOneIdx, barTwoIdx] = animations[i].comparison;\n            const barOneStyle = arrayBars[barOneIdx].style;\n            const barTwoStyle = arrayBars[barTwoIdx].style;\n\n            timeouts.push(\n              setTimeout(() => {\n                const tempHeight = barOneStyle.height;\n                barOneStyle.height = barTwoStyle.height;\n                barTwoStyle.height = tempHeight;\n\n                if (this.isAnimationFinished()) {\n                  isRunning = false;\n                }\n              }, i * animationSpeed)\n            );\n          }\n\n          const sorted = animations[i].sorted;\n\n          if (sorted !== undefined) {\n            timeouts.push(\n              setTimeout(() => {\n                for (let j = 0; j < sorted.length; ++j) {\n                  arrayBars[sorted[j]].style.backgroundColor = \"mediumpurple\";\n                }\n              }, i * animationSpeed + animationSpeed * animationMultiplier * 2)\n            );\n          }\n        }\n      }\n    }\n  }\n\n  isAnimationFinished() {\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < this.state.array.length; ++i) {\n      if (arrayBars[i].style.height.value !== this.state.array[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  reRender() {\n    this.setState(this.state);\n  }\n\n  stopAnimations() {\n    //\n  }\n\n  /**\n   * Slider functions\n   */\n  setNumberOfBars() {\n    var slider = document.getElementById(\"numberOfBars\");\n    numberOfBars = slider.value;\n    animationSpeed = animationDuration / numberOfBars;\n    this.resetArray();\n  }\n\n  render() {\n    const { array } = this.state;\n    const dimensions = this.state.dimensions;\n\n    return (\n      <div className=\"body\">\n        <div className=\"array-container\">\n          {array.map((value, idx) => (\n            <div\n              className=\"array-bar\"\n              key={idx}\n              style={{\n                backgroundColor: PRIMARY_COLOR,\n                height: `${value}px`,\n                width: `${\n                  dimensions[0] / numberOfBars -\n                  2 * INNER_BAR_MARGIN -\n                  (2 * OUTER_MARGIN) / numberOfBars\n                }px`,\n              }}\n            ></div>\n          ))}\n        </div>\n        <div>\n          <p className=\"footer\">Created by Robert Barta</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Controls extends Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n            numBars: 100,\n            enabled: [true, true, true, true, true, true, true, true, true],\n            sliderEnabled: true\n\t\t};\n\t}\n\n    childFunction=(algo)=>{\n        this.props.functionCallFromParent(algo);\n\n        const algoButtons = document.getElementsByClassName(\"algoBtn\");\n        var enabled = [];\n        const numBars = this.state.numBars;\n\n        var sliderEnabled = false;\n\n        if (algo !== 0) {\n            if (!this.state.enabled[0]) {\n                for (let i = 0; i < this.state.enabled.length; ++i) {\n                    enabled[i] = true;\n                    algoButtons[algo - 1].id = \"none\";\n                }\n                sliderEnabled = true;\n            } else {\n                for (let i = 0; i < this.state.enabled.length; ++i) {\n                    enabled[i] = false;\n                }\n    \n                enabled[algo] = true;\n                algoButtons[algo - 1].id = \"playing\";\n            }\n    \n            this.setState({numBars, enabled, sliderEnabled });\n        }\n    }\n\n    enableUI() {\n        const buttons = document.getElementsByClassName(\"algoBtn\");\n\n        const enabled = [true];\n\n        for (let i = 0; i < buttons.length; ++i) {\n            enabled.push(true);\n            buttons[i].id = \"none\";\n        }\n\n        const numBars = this.state.numBars;\n\n        this.setState({ numBars, enabled, sliderEnabled: true });\n    }\n\n    updateBars = () => {\n        this.props.updateBars();\n    }\n\n    setNumBars() {\n\t\tvar slider = document.getElementById(\"numberOfBars\");\n\t\tconst numBars = slider.value;\n        //this.resetArray();\n        this.setState({ numBars });\n        this.updateBars();\n\t}\n\n    render() {\n        return (\n        <div className=\"controls\">\n\t\t\t\t\t<button onClick={() => this.childFunction(0)} className=\"randomizeBtn\" disabled={!this.state.enabled[0]}>Randomize</button>\n\t\t\t\t\t<button onClick={() => this.childFunction(1)} className=\"algoBtn\" id=\"mergesortBtn\" disabled={!this.state.enabled[1]}>MergeSort</button>\n\t\t\t\t\t<button onClick={() => this.childFunction(2)} className=\"algoBtn\" id=\"quicksortBtn\" disabled={!this.state.enabled[2]}>QuickSort</button>\n                    <button onClick={() => this.childFunction(3)} className=\"algoBtn\" id=\"insertionsortBtn\" disabled={!this.state.enabled[3]}>HeapSort</button>\n\t\t\t\t\t<button onClick={() => this.childFunction(4)} className=\"algoBtn\" id=\"combSortBtn\" disabled={!this.state.enabled[4]}>CombSort</button>\n\t\t\t\t\t<button onClick={() => this.childFunction(5)} className=\"algoBtn\" id=\"bubblesortBtn\" disabled={!this.state.enabled[5]}>BubbleSort</button>\n\t\t\t\t\t<button onClick={() => this.childFunction(6)} className=\"algoBtn\" id=\"insertionsortBtn\" disabled={!this.state.enabled[6]}>InsertionSort</button>\n\t\t\t\t\t<button onClick={() => this.childFunction(7)} className=\"algoBtn\" disabled={!this.state.enabled[7]}>SelectionSort</button>\n\t\t\t\t\t<br />\n                    <p>Number of bars: {this.state.numBars}</p>\n\t\t\t\t\t<input type=\"range\" min=\"10\" max=\"300\" value={this.state.numBars} disabled={!this.state.sliderEnabled} className=\"slider\" id=\"numberOfBars\" onChange={() => this.setNumBars()} />\n\t\t\t\t</div>\n        );\n    }\n}\n\nexport default Controls;","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport SortingVisualizer from \"./SortingVisualizer\";\nimport Controls from \"./Controls\";\n\nvar numberOfBars = 10;\n\nvar algo = 0;\n\nclass Main extends Component {\n\n    parentFunction = (data_from_child) => {\n        algo = data_from_child;\n        const sV = this.refs.child;\n\n        switch (data_from_child) {\n            case 0:\n                sV.resetArray();\n                break;\n            case 1:\n                sV.mergeSort();\n                break;\n            case 2:\n                sV.quickSort();\n                break;\n            case 3:\n                sV.heapSort();\n                break;\n            case 4:\n                sV.combSort();\n                break;\n            case 5:\n                sV.bubbleSort();\n                break;\n            case 6:\n                sV.insertionSort();\n                break;\n            case 7:\n                sV.selectionSort();\n                break;\n            default:\n                break;\n        }\n    }\n\n    updateBars = () => {\n        this.refs.child.setNumberOfBars();\n    }\n\n    animationFinished = () => {\n        this.refs.controlChild.enableUI();\n    }\n\n    render() {\n        return (\n            <div>\n                <Controls ref=\"controlChild\" functionCallFromParent={this.parentFunction.bind(this)} updateBars={this.updateBars.bind(this)}></Controls>\n                <SortingVisualizer ref=\"child\" animationFinished={this.animationFinished.bind(this)} newAlg={algo}></SortingVisualizer>\n            </div>\n        );\n    }\n}\n\nexport default Main;","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport Controls from './SortingVisualizer/Controls';\nimport './App.css';\nimport Main from './SortingVisualizer/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main></Main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}